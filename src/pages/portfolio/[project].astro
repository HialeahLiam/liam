---
import BrewRevealed from "../../components/revealedComponents/BrewRevealed.astro";
import HeatmapRevealed from "../../components/revealedComponents/HeatmapRevealed.astro";
import Project from "../../layouts/project.astro";
import { projects } from "../portfolio.astro";
import { getCollection, getEntry } from "astro:content";

export async function getStaticPaths() {
  return projects.map((project) => ({
    params: { project: project.id },
  }));
}
const { project } = Astro.params;
console.log({project})

const projectContent = project
  ? await getEntry("projects", project)
  : undefined;
---

<Project>
  <div class="grid sm:grid-cols-2">
    <div
      class="min-h-screen bg-neutral-950 text-white sm:flex items-center justify-center hidden"
    >
      <div
        id="revealed-content-container"
        class="-translate-x-56 transition duration-1000 opacity-0  w-full h-full"
      >
        {
          (() => {
            switch (project) {
              case "brew":
                return <BrewRevealed />;
              case "spotify-heatmap":
                return <HeatmapRevealed></HeatmapRevealed>
              default:
                break;
            }
          })()
        }
      </div>
    </div>
    <div id="content-window" class="h-screen py-12 overflow-y-scroll">
      <div class="flex justify-between items-center sm:px-12 px-8 mb-16">
        <div class="flex items-center gap-6">
          <h1 class="text-white text-4xl font-body">
            {projectContent?.data.projectName}
          </h1>
          {projectContent?.data.projectLink && 
          <a href={projectContent.data.projectLink}  class="text-black relative w-4">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"
              ><!--! Font Awesome Pro 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
              <path
                d="M320 0c-17.7 0-32 14.3-32 32s14.3 32 32 32h82.7L201.4 265.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L448 109.3V192c0 17.7 14.3 32 32 32s32-14.3 32-32V32c0-17.7-14.3-32-32-32H320zM80 32C35.8 32 0 67.8 0 112V432c0 44.2 35.8 80 80 80H400c44.2 0 80-35.8 80-80V320c0-17.7-14.3-32-32-32s-32 14.3-32 32V432c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16H192c17.7 0 32-14.3 32-32s-14.3-32-32-32H80z"
              ></path></svg>
          </a>
          }

{projectContent?.data.projectGithub && 
  <a href={projectContent.data.projectGithub} class="w-4">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512"
      ><!--! Font Awesome Pro 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
      <path
        d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"
      ></path></svg>
  </a>
}
        </div>
        <a href="/portfolio">
          <svg
            width="34"
            height="33"
            viewBox="0 0 34 33"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <line
              x1="1.35355"
              y1="0.646447"
              x2="32.8575"
              y2="32.1504"
              stroke="black"></line>
            <line
              x1="0.646447"
              y1="32.1504"
              x2="32.1504"
              y2="0.646387"
              stroke="black"></line>
          </svg>
        </a>
      </div>
      <div class="grid sm:grid-cols-4">
        <div
          class="col-span-3 font-body text-sm sm:text-base tracking-tight sm:pl-12 sm:pr-8 px-8 space-y-12"
        >
          {
            projectContent?.data.paragraphs?.map((paragraph) => {
              if (paragraph.anchorNumber) {
                return (
                  <>
                    <p
                      class="content-anchor"
                      data-anchor-number={`${paragraph.anchorNumber}`}
                    >
                      {paragraph.text}
                    </p>

                    <div
                      class="reveal-container transition duration-1000 opacity-0 -translate-x-56  sm:hidden"
                      data-anchor-number={`${paragraph.anchorNumber}`}
                    >
                      {
                        (() => {
                          switch (project) {
                            case "brew":
                              return <BrewRevealed reveal={paragraph.anchorNumber}/>;
                            case "spotify-heatmap":
                              return <HeatmapRevealed reveal={paragraph.anchorNumber}></HeatmapRevealed>
                            default:
                              break;
                          }
                        })()
                      }
                    </div>
                  </>
                );
              }
              return <p>{paragraph.text}</p>;
            })
          }
        </div>
        <!-- Chapter selection -->
        <!-- <div class="border-t border-black flex flex-col items-start font-body">
          <button
            class="project border-b border-black w-full hover:bg-mildOrange flex"
          >
            <span class="text-1xl py-4">Chapter</span>
          </button>
          <button
            class="project border-b border-black w-full hover:bg-mildOrange flex"
          >
            <span class="text-1xl py-4">Chapter</span>
          </button>
          <button
            class="project border-b border-black w-full hover:bg-mildOrange flex"
          >
            <span class="text-1xl py-4">Chapter</span>
          </button>
          <button
            class="project border-b border-black w-full hover:bg-mildOrange flex"
          >
            <span class="text-1xl py-4">Chapter</span>
          </button>
        </div> -->
      </div>
      <div id="content-footer"></div>
    </div>
  </div>
</Project>

<script defer="true">
  const revealContainer = document.querySelector("#revealed-content-container");

  const mobileContainers = document.querySelectorAll(".reveal-container");

  for (let child of revealContainer.children) {
    child.classList.add("revealed-content", "opacity-0", "transition", "absolute", "inset-0");
  }

  // for (let container of mobileContainers) {
  //   for (let child of container.children) {
  //     child.classList.add("revealed-content-mobile", "opacity-0", "transition");
  //   }
  // }

  console.log({ mobileContainers });
  // revealContainer.children.forEach((child) => {
  //   console.log({ child });
  // });

  const contentAnchors = document.querySelectorAll(".content-anchor");
  const contentWindow = document.querySelector("#content-window");
  const contentFooter = document.querySelector("#content-footer");

  // should be at least opposite of each other to ensure all anchor text reaches reveal point
  contentFooter.classList.add("h-3/4");
  const revealProportion = 1 / 4;

  const reveal = () => {
    console.log("\n");
    let revealId = "-1";
    contentAnchors.forEach((anchor) => {
      const top = anchor.getBoundingClientRect().top;

      if (window.innerHeight * revealProportion >= top) {
        console.log("revealed");
        revealId = anchor.getAttribute("data-anchor-number") || "-1";
      }
    });

    console.log(revealId);

    const revealableElements = document.querySelectorAll(".revealed-content");
    // const revealableElementsMobile = document.querySelectorAll(
    //   ".revealed-content-mobile"
    // );
    console.log({ revealableElements });
    revealableElements.forEach((element) => {
      if (element.getAttribute("data-anchor-number") === revealId) {
        // reveal
        element.classList.replace("opacity-0", "opacity-100");
      } else {
        //hide
        element.classList.replace("opacity-100", "opacity-0");
      }
    });
    mobileContainers.forEach((container) => {
      if (container.getAttribute("data-anchor-number") === revealId) {
        // reveal
        container.classList.replace("opacity-0", "opacity-100");
        container.classList.add("translate-x-0");
      }
    });
  };

  contentWindow?.addEventListener("scroll", reveal);
  reveal();
  document.querySelectorAll('div[data-anchor-number="1"]').forEach(element => {
    element.classList.replace("opacity-0", "opacity-100");
  })
  

  setTimeout(() => {
    revealContainer.classList.add("translate-x-0", "opacity-100");
  }, 500);
</script>
