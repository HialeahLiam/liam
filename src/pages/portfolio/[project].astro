---
import BrewRevealed from "../../components/revealedComponents/BrewRevealed.astro";
import Project from "../../layouts/project.astro";
import { projects } from "../portfolio.astro";
import { getCollection, getEntry } from "astro:content";

export async function getStaticPaths() {
  return projects.map((project) => ({
    params: { project: project.id },
  }));
}
const { project } = Astro.params;

const projectContent = project
  ? await getEntry("projects", project)
  : undefined;
---

<Project>
  <div class="grid sm:grid-cols-2">
    <div
      class="min-h-screen bg-neutral-950 text-white sm:flex items-center justify-center hidden"
    >
      <div
        id="revealed-content-container"
        class="-translate-x-56 transition duration-1000 opacity-0"
      >
        {
          (() => {
            switch (project) {
              case "brew":
                return <BrewRevealed />;
              default:
                break;
            }
          })()
        }
      </div>
    </div>
    <div id="content-window" class="h-screen py-12 overflow-y-scroll">
      <div class="flex justify-between items-center px-12 mb-16">
        <h1 class="text-white text-4xl font-body">
          {projectContent?.data.projectName}
        </h1>
        <a href="/portfolio">
          <svg
            width="34"
            height="33"
            viewBox="0 0 34 33"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <line
              x1="1.35355"
              y1="0.646447"
              x2="32.8575"
              y2="32.1504"
              stroke="black"></line>
            <line
              x1="0.646447"
              y1="32.1504"
              x2="32.1504"
              y2="0.646387"
              stroke="black"></line>
          </svg>
        </a>
      </div>
      <div class="grid grid-cols-4">
        <div class="col-span-3 font-body tracking-tight pl-12 pr-8 space-y-12">
          {
            projectContent?.data.paragraphs?.map((paragraph) => {
              if (paragraph.anchorNumber) {
                return (
                  <>
                    <p
                      class="content-anchor"
                      data-anchor-number={`${paragraph.anchorNumber}`}
                    >
                      {paragraph.text}
                    </p>

                    <div
                      class="reveal-container transition duration-1000 opacity-0 -translate-x-56  sm:hidden"
                      data-anchor-number={`${paragraph.anchorNumber}`}
                    >
                      <BrewRevealed reveal={paragraph.anchorNumber} />
                    </div>
                  </>
                );
              }
              return <p>{paragraph.text}</p>;
            })
          }
        </div>
        <!-- Chapter selection -->
        <!-- <div class="border-t border-black flex flex-col items-start font-body">
          <button
            class="project border-b border-black w-full hover:bg-mildOrange flex"
          >
            <span class="text-1xl py-4">Chapter</span>
          </button>
          <button
            class="project border-b border-black w-full hover:bg-mildOrange flex"
          >
            <span class="text-1xl py-4">Chapter</span>
          </button>
          <button
            class="project border-b border-black w-full hover:bg-mildOrange flex"
          >
            <span class="text-1xl py-4">Chapter</span>
          </button>
          <button
            class="project border-b border-black w-full hover:bg-mildOrange flex"
          >
            <span class="text-1xl py-4">Chapter</span>
          </button>
        </div> -->
      </div>
      <div id="content-footer"></div>
    </div>
  </div>
</Project>

<script defer="true">
  const revealContainer = document.querySelector("#revealed-content-container");

  const mobileContainers = document.querySelectorAll(".reveal-container");

  for (let child of revealContainer.children) {
    child.classList.add("revealed-content", "opacity-0", "transition");
  }

  // for (let container of mobileContainers) {
  //   for (let child of container.children) {
  //     child.classList.add("revealed-content-mobile", "opacity-0", "transition");
  //   }
  // }

  console.log({ mobileContainers });
  // revealContainer.children.forEach((child) => {
  //   console.log({ child });
  // });

  const contentAnchors = document.querySelectorAll(".content-anchor");
  const contentWindow = document.querySelector("#content-window");
  const contentFooter = document.querySelector("#content-footer");

  // should be at least opposite of each other to ensure all anchor text reaches reveal point
  contentFooter.classList.add("h-3/4");
  const revealProportion = 1 / 4;

  const reveal = () => {
    console.log("\n");
    let revealId = "-1";
    contentAnchors.forEach((anchor) => {
      const top = anchor.getBoundingClientRect().top;

      if (window.innerHeight * revealProportion >= top) {
        console.log("revealed");
        revealId = anchor.getAttribute("data-anchor-number") || "-1";
      }
    });

    console.log(revealId);

    const revealableElements = document.querySelectorAll(".revealed-content");
    // const revealableElementsMobile = document.querySelectorAll(
    //   ".revealed-content-mobile"
    // );
    console.log({ revealableElements });
    revealableElements.forEach((element) => {
      if (element.getAttribute("data-anchor-number") === revealId) {
        // reveal
        element.classList.replace("opacity-0", "opacity-100");
      } else {
        //hide
        element.classList.replace("opacity-100", "opacity-0");
      }
    });
    mobileContainers.forEach((container) => {
      if (container.getAttribute("data-anchor-number") === revealId) {
        // reveal
        container.classList.replace("opacity-0", "opacity-100");
        container.classList.add("translate-x-0");
      }
    });
  };

  contentWindow?.addEventListener("scroll", reveal);
  reveal();

  setTimeout(() => {
    revealContainer.classList.add("translate-x-0", "opacity-100");
  }, 500);
</script>
